#!/usr/bin/env node

const {
  updatePerFileCoverageExceptions,
  runPerFileCoverageTest,
} = require("../src");
const {
  mergeCoverageAndGenerateSummaryReport,
} = require("../src/mergeCoverage");

let validateCoverage = false;
let mergePerformed = false;
const option = process.argv[2];
switch (option) {
  case "--help":
  case "-h":
    // eslint-disable-next-line no-console
    console.log(`
Usage: jest-a-coverage-slip-detector [options]

Options:
  --help, -h             Show this help

  --update               Update exceptions with improved coverage levels.
                         Used to 'ratchet' up coverage after improving it.

  --force-update         Record current coverage errors as exceptions.
                         Used to:
                           - Snapshot current coverage errors as legacy exceptions.
                           - Force accept a reduction in coverage.

  --merge                Merges together concurrently collected coverage

  --report-only          Exit successfully even if coverage errors are detected.
    `);
    break;
  case "--force":
  case "--force-update":
    updatePerFileCoverageExceptions(true);
    break;
  case "--update":
    updatePerFileCoverageExceptions(false);
    break;
  case "--merge":
    mergeCoverageAndGenerateSummaryReport();
    validateCoverage = true;
    mergePerformed = true;
    break;
  default:
    validateCoverage = true;
    break;
}

if (validateCoverage) {
  if (runPerFileCoverageTest(mergePerformed) && option !== "--report-only") {
    process.exit(1);
  }
}
